use superslice::Ext;

fn main() {
    proconio::input! {
        N: usize,
        M: usize,
        mut A: [usize; N]
    }

    // ソート
    A.sort();

    // 決め打ち二分探索
    let mut ans = 0;

    for i in 0..N {
        let r = A.lower_bound(&(A[i] + M));
        ans = ans.max(r - i);
    }

    println!("{}", ans);
}

===== ↑ /home/powell/develop/algo/kyopro/contests/abc326/src/bin/c.rs | ↓ /home/powell/develop/algo/kyopro/atcoder_training/abc326/src/bin/c.rs =====
#![allow(unused_imports)]
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(dead_code)]
#![allow(unused_macros)]

macro_rules! debug {
    ( $($val:expr),* $(,)* ) => {{
        #[cfg(debug_assertions)]
        eprintln!( concat!($(stringify!($val), " = {:?}, "),*), $($val),* );
    }};
}
macro_rules! debug2D {
    ( $array:expr ) => {{
        #![cfg(debug_assertions)]
        eprintln!("{}: ", stringify!($array));
        for row in &$array {
            eprintln!("{:?}", row);
        }
    }};
}

use proconio::{input, marker::{Chars, Bytes, Usize1}};

fn main() {
    
}

const INF: usize = 1001001001001001001;
